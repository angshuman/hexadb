syntax = "proto3";
option csharp_namespace = "Hexastore.GRPC";
package store;

// services 

service Greeter {
  rpc SayHello (HelloRequest) returns (HelloReply);
}

service Ingest {
    rpc Assert(AssertRequest)  returns (AssertResponse);
    rpc Patch(AssertRequest)  returns (AssertResponse);
}

service Query {
    rpc Query(QueryRequest) returns (QueryResponse);
    rpc SelectAll(QueryRequest) returns (stream TripleMessage);
}

// types 

message HelloRequest {
  string name = 1;
}

message HelloReply {
  string message = 1;
}

message AssertRequest
{
    string StoreId = 1;
    repeated TripleMessage Triples = 2;
}

message AssertResponse
{
    int32 Count = 1;
    string Message = 2;
}

message TripleMessage
{
    string Subject = 1;
    string Predicate = 2;
    string Object = 3;
    enum ValueType
    {
        Int = 0;
        String = 1;
        Double = 2;
        Bool = 3;
    }
    ValueType Type = 4;
    oneof Value
    {
        int64 IntValue = 5; 
        string StringValue = 6;
        double DoubleValue = 7;
        bool BoolValue = 8;
    }
    int32 ArrayIndex = 9;
}

message QueryResponse
{
    repeated TripleMessage Triples = 1;
    TripleMessage Continuation = 2;
}

message QueryRequest
{
    string StoreId = 1;
    ObjectQuery Query = 2;
    repeated string Expand = 3;
    int32 Levels = 4;
}

message ObjectQuery 
{
    string id = 1;
    map<string, QueryUnit> Filter = 2;
    repeated LinkQuery HasSubject = 3;
    repeated LinkQuery HasObject = 4;
    repeated AggregateQuery Aggregates = 5;
    int32 PageSize = 40;
    TripleMessage Continuation = 50;
}

message QueryUnit {
    string Operator = 1;
    enum ValueType
    {
        Int = 0;
        String = 1;
        Double = 2;
        Bool = 3;
    }
    ValueType Type = 3;
    oneof Value
    {
        int64 IntValue = 4; 
        string StringValue = 5;
        double DoubleValue = 6;
        bool BoolValue = 7;
    }
}

message LinkQuery
{
    int32 Level = 1;
    string Path = 2;
    ObjectQuery Target = 3;
}

message AggregateQuery
{
    enum AggregateType {
        Undefined = 0;
        Count = 1;
    }
    AggregateType Type = 1;
}

/*
    public class ObjectQueryModel
    {
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("filter")]
        public IDictionary<string, QueryUnit> Filter { get; set; }
        [JsonProperty("continuation")]
        public Continuation Continuation { get; set; }
        [JsonProperty("pageSize")]
        public int PageSize { get; set; }
        [JsonProperty("incoming")]
        public LinkQuery[] HasSubject { get; set; }
        [JsonProperty("outgoing")]
        public LinkQuery[] HasObject { get; set; }
        [JsonProperty("aggregates")]
        public AggregateQuery[] Aggregates { get; set; }
    }

    public class QueryUnit
    {
        [JsonProperty("op")]
        public string Operator { get; set; }
        [JsonProperty("value")]
        public object Value { get; set; }
    }

    public class LinkQuery
    {
        [JsonProperty("level")]
        public int Level { get; set; }
        [JsonProperty("path")]
        public string Path { get; set; }
        [JsonProperty("target")]
        public ObjectQueryModel Target { get; set; }
    }
*/
